# Default values for cloudprober.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: ghcr.io/cloudprober/cloudprober
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: null

# configmap to use for the cloudprober config.
# configMap name defaults to release name, but can be overridden here.
# If create is true, a configMap is created from the config value, otherwise
# an existing configMap is used.
# One caveat with managing config map outside of helm charts is that you'll
# need to manage the deployment restart yourself after updating the config
# map.
configMap:
  name: ''
  create: true

# You can either embed config here, or keep it in a separate file and provide
# it at run-time, like this:
# helm .. --set-file config=<path to cloudprober config>
config: |
  surfacer {
    type: PROMETHEUS
  }

# Example:
# env:
#  - name: SERVICE_TOKEN
#    valueFrom:
#      configMapKeyRef:
#        name: cloudprober-secrets
#        key: service_token

# The name of a secret in the same kubernetes namespace which contains values
# to be added to the environment (must be manually created). This can be useful
# for auth tokens, etc.
envFromSecret: ''

imagePullSecrets: []
nameOverride: ''
fullnameOverride: ''

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ''

# Create RBAC for read-only access to k8s resources.
rbac:
  create: true

podAnnotations:
  {}

podLabels:
  {}

podSecurityContext:
  {}
  # fsGroup: 2000

securityContext:
  {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 8080

serviceMonitor:
  enabled: true

ingress:
  enabled: false
  className: ''
  annotations:
    {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}
