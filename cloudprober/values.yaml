# Default values for cloudprober.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: ghcr.io/cloudprober/cloudprober
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: null

# configmap to use for the cloudprober config.
# configMap name defaults to release name, but can be overridden here.
# If create is true, a configMap is created from the config value, otherwise
# an existing configMap is used.
# One caveat with managing config map outside of helm charts is that you'll
# need to manage the deployment restart yourself after updating the config
# map. You may also want to set the value of configFileName
configMap:
  name: ''
  create: true

# The default config filename is 'cloudprober'. If managing the configMap outside of helm,
# you may want to use a more specific filename instead, which can be set via configFileName
configFileName: 'cloudprober'
# The config file suffix; suffixes that provide different parsing are:
# "json", "yaml", "yml"
configFormat: 'cfg'

# You can either embed config here, or keep it in a separate file and provide
# it at run-time, like this:
# helm .. --set-file config=<path to cloudprober config>
config: |
  surfacer {
    type: PROMETHEUS
  }

# This option is useful to split the config into multiple files. Cloudprober
# supports including other files using the "include" directive. Using
# additionalConfigs you can provide additional files to be included in the
# configmap. All these files will be mounted in the same directory as the
# main config file, so you can directly include them.
#
# For example, if you add an additional config file "team1.cfg", you can
# include it in the main config file as:
# include: "team1.cfg"
#
# Example:
# additionalConfigs:
#  - name: config1
#    value: |
#      probe {
#        ...
#      }
#
# To set this value on command line:
# helm .. --set-file extraConfigs[0].name=team1.cfg,extraConfigs[0].value=$home/team1.cfg"
additionalConfigs: []

# Example:
# env:
#  - name: SERVICE_TOKEN
#    valueFrom:
#      configMapKeyRef:
#        name: cloudprober-secrets
#        key: service_token

# The name of a secret in the same kubernetes namespace which contains values
# to be added to the environment (must be manually created). This can be useful
# for auth tokens, etc.
envFromSecret: ''

imagePullSecrets: []
nameOverride: ''
fullnameOverride: ''

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ''

# Create RBAC for read-only access to k8s resources.
rbac:
  create: true

podAnnotations: {}

podLabels: {}

podSecurityContext:
  {}
  # fsGroup: 2000

securityContext:
  {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 8080

serviceMonitor:
  enabled: true

ingress:
  enabled: false
  className: ''
  annotations:
    {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}

topologySpreadConstraints:
  []
  # - labelSelector:
  #     matchLabels:
  #       app.kubernetes.io/instance: cloudprober
  #       app.kubernetes.io/name: cloudprober
  #   maxSkew: 1
  #   topologyKey: topology.kubernetes.io/zone
  #   whenUnsatisfiable: ScheduleAnyway

# Extra configmaps to mount in cloudprober pods
# Values are templated.
extraConfigmapMounts:
  []
  # - name: certs-configmap
  #   mountPath: /certs/ssl/
  #   subPath: certificates.crt # (optional)
  #   configMap: certs-configmap
  #   readOnly: true

# Extra containers. We can use these containers to run helper services like
# cypress-server to run UI tests.
extraContainers: ''
# extraContainers: |
# - name: cypress-server
#   image: ghcr.io/manugarg/cypress-server:latest
#   ports:
#     - name: http
#       containerPort: 8080
